@using Fatihdgn.Notes.App.Data;
@using Fatihdgn.Notes.App.ViewModels;
@inherits LayoutComponentBase
@inject NotesDB context
@inject NoteViewModel vm
@inject NavigationManager nav


<div class="drawer">
    <input id="my-drawer" type="checkbox" class="drawer-toggle" />
    <div class="drawer-content">
        <div class="flex flex-row absolute top-3 left-3 items-center">
            <label for="my-drawer"
                   class="btn btn-primary drawer-button"><i class="fa-solid fa-bars"></i></label>
            <span class="text-3xl ml-3 flex items-center">
                @if (vm.InEditMode)
                {
                    <input class="input input-ghost mr-3" @bind="vm.Name" />
                    <button class="btn btn-ghost" @onclick="ExitEditModeAsync"><i class="fa-solid fa-floppy-disk"></i></button>
                }
                else
                {
                    @(vm.Applied ? vm.Name : "Notes")
                }
                @if (vm.Applied && !vm.InEditMode)
                {
                    <button class="btn btn-ghost ml-3" @onclick="GoToEditMode">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                }
            </span>
        </div>
        <div class="flex flex-col mt-16">
            @Body
        </div>
    </div>
    <div class="drawer-side">
        <label for="my-drawer" class="drawer-overlay"></label>
        <ul class="menu p-4 w-80 h-full bg-base-200 text-base-content">

            <h1 class="text-3xl mb-3">Notes</h1>
            <!-- Sidebar content here -->
            @foreach (var note in Notes)
            {
                <li class="mb-2" @onclick="() => SelectNote(note)"><a>@note.Name</a></li>
            }
        </ul>
    </div>
</div>

@code {
    private List<Note> Notes { get; set; } = new List<Note>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateNotes();
    }

    async Task UpdateNotes()
    {
        Notes = await context.GetItemsAsync();
        StateHasChanged();
    }

    public void SelectNote(Note note)
    {
        vm.ApplyEntity(note);
        nav.NavigateTo("/note-view");
        StateHasChanged();
    }

    public void GoToEditMode()
    {
        vm.InEditMode = true;
        StateHasChanged();
    }

    public async Task ExitEditModeAsync()
    {
        vm.InEditMode = false;
        await context.SaveItemAsync(vm.AsEntity());
        StateHasChanged();
        await UpdateNotes();
    }
}
